# Use a multi-stage build for efficiency
FROM node:22 AS builder

WORKDIR /build

COPY package* tsconfig* nest-cli.json patches ./

RUN npm ci

WORKDIR /build/libs

COPY libs ./

WORKDIR /build/apps/content-publishing-api

COPY apps/content-publishing-api ./

WORKDIR /build/apps/content-publishing-worker

COPY apps/content-publishing-worker ./

# Build the application
RUN npm run build:content-publishing && \
    rm -rf node_modules && \
	npm ci --omit=dev

# Production stage
FROM node:22-alpine

ENV NODE_ENV=production

WORKDIR /app

COPY --from=builder /build/dist ./dist/
COPY ./package*.json ./
COPY lua ./lua/
COPY scripts/content-publishing/docker-entrypoint.sh ./
COPY --from=builder /build/node_modules ./node_modules/
RUN chmod +x ./docker-entrypoint.sh
RUN mkdir ./openapi-specs

# We want jq and curl in the final image, but we don't need the support files
# Install jq, curl, and tini using apk
RUN apk add --no-cache jq curl tini
RUN apk add libc6-compat

EXPOSE 3000

ENTRYPOINT [ "/sbin/tini", "--", "./docker-entrypoint.sh", "prod" ]
