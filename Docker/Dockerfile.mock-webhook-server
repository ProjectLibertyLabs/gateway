# Stage 1: Build the application using static linking with the GNU toolchain
FROM rust:bullseye AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy the Cargo.toml and Cargo.lock files to cache dependencies
COPY rust-webhook-server/Cargo.toml rust-webhook-server/Cargo.lock ./

# Create a dummy main.rs to allow Cargo to fetch dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Fetch dependencies
RUN cargo build --release && rm -rf src target/release/rust-webhook-server

# Copy the rest of the application source code
COPY rust-webhook-server/ .
RUN touch src/main.rs

# Build the actual Rust application, enabling static linking for the standard library
RUN cargo build --release

# Stage 2: Use a minimal base image to run the application
FROM debian:bullseye

RUN apt-get update & apt-get install -y extra-runtime-dependencies & rm -rf /var/lib/apt/lists/*

# Set the working directory inside the container
WORKDIR /app

# Copy the statically linked binary from the builder stage
COPY --from=builder /app/target/release/rust-webhook-server .

# Expose the port your application will run on (adjust as necessary)
EXPOSE 3001

# Run the binary
CMD ["./rust-webhook-server"]
