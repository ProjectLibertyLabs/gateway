/* eslint-disable import/no-unresolved */
/* eslint-disable func-names */
/*
 * Account Service
 * Account Service API: New Sign Ups
 * NOTE: This test MUST run on a clean chain and cannot be re-run without running: npm run generate:signups
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.7.0-SNAPSHOT
 */

import http from 'k6/http';
import { group, check, sleep } from 'k6';
import exec from 'k6/execution';
import { signups } from './signups.gen.js';

export const options = {
  // scenarios: {
  //   constant_request_rate: {
  //     executor: 'constant-arrival-rate',
  //     rate: 1000,
  //     timeUnit: '1s',
  //     duration: '10s',
  //     preAllocatedVUs: 100,
  //     maxVUs: 200,
  //   },
  // },
  vus: 1,
  duration: '20s',
  thresholds: {
    http_req_duration: ['avg<100', 'p(95)<200'],
  },
  noConnectionReuse: true,
  // stages: [
  //   { duration: '30s', target: 10 }, // Ramp-up to 10 users over 30 seconds
  //   { duration: '1m', target: 10 }, // Stay at 10 users for 1 minute
  //   { duration: '30s', target: 0 }, // Ramp-down to 0 users over 30 seconds
  // ],
};

const CALLBACK_URL = 'http://localhost:3001/webhooks/account-service';
const BASE_URL = 'http://localhost:3000';
// Sleep duration between successive requests.
const SLEEP_DURATION = 0.1;
const BLOCKTIME_SECONDS = 13; // Add 1 second for additional loop buffer
// Global variables should be initialized.

function checkCallback(referenceId) {
  const res = http.get(CALLBACK_URL);
  console.log('Callback response:', res.status, res.body);
  check(res, {
    'callback received': (r) => r.status === 201,
    'callback contains expected data': (r) => {
      const json = JSON.parse(r.body);
      return json.referenceId === referenceId;
    },
  });
}

export async function setup() {
  // Let's make sure the service is healthy before starting the test.
  console.log('Checking service health...');
  const res = http.get(`${BASE_URL}/healthz`);
  console.log('Service health check status:', res.status);
  if (res.status !== 200) {
    console.error('Service is not healthy! Terminating test...');
    return false;
  }

  return { signUpBody: signups[exec.vu.iterationInInstance] };
}

export default function (setupData) {
  group('/v1/accounts/siwf', () => {
    // Request No. 1: AccountsController_getSIWFConfig
    {
      const url = `${BASE_URL}/v1/accounts/siwf`;
      const request = http.get(url);

      check(request, {
        'Returned SIWF Configuration data': (r) => r.status === 200,
      });

      sleep(SLEEP_DURATION);
    }

    // Request No. 2: AccountsController_postSignInWithFrequency
    let referenceId;
    {
      const url = `${BASE_URL}/v1/accounts/siwf`;
      // Use the SIWF sample Sign Up request body for a new user.
      const body = setupData.signUpBody;
      const params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      const request = http.post(url, JSON.stringify(body), params);

      check(request, {
        'Signed in successfully': (r) => r.status === 201,
        'Has referenceId': (r) => !!JSON.parse(r.body).referenceId,
      });
      referenceId = JSON.parse(request.body).referenceId;
    }

    // The front end will poll the server for the account status.
    // We'll wait here for a block to be finalized.
    sleep(BLOCKTIME_SECONDS);
    console.log('Block finalized. Checking callback...', { referenceId });
    checkCallback(referenceId);
  });
}
