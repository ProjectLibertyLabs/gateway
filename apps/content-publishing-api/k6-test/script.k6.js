/*
 * Content Publishing Service API
 * Content Publishing Service API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.7.0-SNAPSHOT
 */

import http from 'k6/http';
import { check, group } from 'k6';

import {
  validContentNoUploadedAssets,
  validProfileNoUploadedAssets,
  validReaction,
  validReplyNoUploadedAssets,
  validOnChainContent,
  validTombstone
} from '../test/mockRequestData.ts';

import { getReferenceId, createContentWithAsset } from './helpers.js';

const BASE_URL = 'http://localhost:3000';

export const options = {
  vus: 30,
  duration: '10s',
  thresholds: {
    checks: ['rate>=0.995'],
    http_req_duration: ['avg<12000', 'p(95)<18000'],
    http_req_failed: ['rate<0.005'],
    http_reqs: ['rate>=25'],
  },
  noConnectionReuse: true,
};

export default function () {
  group('/v1/content/{msaId}', () => {
    let msaId = '1';
    // Request No. 1: ApiController_update with no assets
    {
      let url = BASE_URL + `/v1/content/${msaId}`;
      const body = {
        targetContentHash: 'bdyqdua4t4pxgy37mdmjyqv3dejp5betyqsznimpneyujsur23yubzna',
        targetAnnouncementType: 'broadcast',
        content: validContentNoUploadedAssets,
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.put(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
    // Request No. 2: ApiController_update with assets
    {
      let url = BASE_URL + `/v1/content/${msaId}`;
      const body = {
        targetContentHash: 'bdyqdua4t4pxgy37mdmjyqv3dejp5betyqsznimpneyujsur23yubzna',
        targetAnnouncementType: 'broadcast',
        content: createContentWithAsset(BASE_URL),
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.put(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }

    // Request No. 3: ApiController_delete
    {
      let url = BASE_URL + `/v1/content/${msaId}`;
      let body = {
        targetContentHash: 'bdyqdua4t4pxgy37mdmjyqv3dejp5betyqsznimpneyujsur23yubzna',
        targetAnnouncementType: 'broadcast',
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      // this is a DELETE method request - if params are also set, empty body must be passed
      let request = http.del(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/healthz', () => {
    // Request No. 1: ApiController_health
    {
      let url = BASE_URL + `/healthz`;
      let request = http.get(url);

      check(request, {
        '': (r) => r.status === 200,
      });
    }
  });

  group('/v1/profile/{msaId}', () => {
    let msaId = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: ApiController_profile with no assets
    {
      let url = BASE_URL + `/v1/profile/${msaId}`;
      let body = { profile: validProfileNoUploadedAssets };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.put(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
    // Request No. 2: ApiController_profile with asset
    {
      let url = BASE_URL + `/v1/profile/${msaId}`;
      const referenceId = getReferenceId(BASE_URL);
      let profile = Object.assign({}, validProfileNoUploadedAssets, {
        icon: [
          {
            referenceId: referenceId,
            height: 123,
            width: 321,
          },
        ],
      });
      let body = { profile: profile };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.put(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/v1/content/{msaId}/broadcast', () => {
    let msaId = '1';

    // Request No. 1: ApiController_broadcast no assets
    {
      let url = BASE_URL + `/v1/content/${msaId}/broadcast`;
      const body = {
        content: validContentNoUploadedAssets,
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
    // Request No. 2: ApiController_broadcast with assets
    {
      let url = BASE_URL + `/v1/content/${msaId}/broadcast`;
      const body = {
        content: createContentWithAsset(BASE_URL),
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/v1/content/{msaId}/reaction', () => {
    let msaId = '1';

    // Request No. 1: ApiController_reaction
    {
      let url = BASE_URL + `/v1/content/${msaId}/reaction`;
      let body = validReaction;
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/v1/content/{msaId}/reply', () => {
    let msaId = '1';

    // Request No. 1: ApiController_reply no assets
    {
      let url = BASE_URL + `/v1/content/${msaId}/reply`;
      let body = validReplyNoUploadedAssets;
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
    // Request No. 2: ApiController_reply with assets
    {
      let url = BASE_URL + `/v1/content/${msaId}/reply`;
      let body = Object.assign({}, validReplyNoUploadedAssets, { content: createContentWithAsset(BASE_URL) });
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  // TODO: Uncomment once we have a valid schema with `OnChain` payload location
  // group('/v2/content/{msaId}/on-chain', () => {
  //   let msaId = '1';

  //   // Request: ContentControllerV2_postContent
  //   {
  //     let url = BASE_URL + `/v2/content/${msaId}/on-chain`;
  //     let body = validOnChainContent;
  //     let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
  //     let request = http.post(url, JSON.stringify(body), params);

  //     check(request, {
  //       '': (r) => r.status === 202,
  //     });
  //   }
  // });

  group('/v2/content/batchAnnouncement', () => {
    // Request No. 2: ContentControllerV2_batchAnnouncement with asset
    {
      let url = BASE_URL + `/v2/content/batchAnnouncement`;
      const referenceId = getReferenceId(BASE_URL, 'parquet', 'application/vnd.apache.parquet');
      let body = { batchFiles: [{ cid: referenceId, schemaId: 16001 }] };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/v2/content/{msaId}/tombstones', () => {
    let msaId = '1';

    // Request No. 1: Create tombstone with a valid announcement type: "broadcast"
    {
      let url = BASE_URL + `/v2/content/${msaId}/tombstones`;
      let body = validTombstone;
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/v3/content/uploadBatchAnnouncement', () => {
    // Test batch upload with multiple files
    {
      let url = BASE_URL + `/v3/content/uploadBatchAnnouncement`;
      const formData = new FormData();
      
      // Add two test files with schema IDs
      const file1 = mockAsset('sm', 'parquet', 'application/vnd.apache.parquet');
      const file2 = mockAsset('sm', 'parquet', 'application/vnd.apache.parquet');
      formData.append('files', file1);
      formData.append('schemaId', '16001');
      formData.append('files', file2);
      formData.append('schemaId', '16001');

      let params = { headers: { 'Content-Type': 'multipart/form-data' } };
      let request = http.post(url, formData, params);

      check(request, {
        'Status is 202': (r) => r.status === 202,
        'Has referenceId': (r) => JSON.parse(r.body).referenceId !== undefined,
        'Has files array': (r) => Array.isArray(JSON.parse(r.body).files),
        'Files have CIDs': (r) => JSON.parse(r.body).files.every(f => f.cid !== undefined)
      });
    }
  });
}
