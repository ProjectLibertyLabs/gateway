# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
x-common-environment: &common-environment
  FREQUENCY_API_WS_URL: ${FREQUENCY_API_WS_URL:-ws://frequency:9944}
  SIWF_NODE_RPC_URL: ${SIWF_NODE_RPC_URL:-http://localhost:9944}
  REDIS_URL: 'redis://redis:6379'
  PROVIDER_ID: ${PROVIDER_ID:-1}
  PROVIDER_ACCOUNT_SEED_PHRASE: ${PROVIDER_ACCOUNT_SEED_PHRASE:-//Alice}
  WEBHOOK_FAILURE_THRESHOLD: 3
  WEBHOOK_RETRY_INTERVAL_SECONDS: 10
  HEALTH_CHECK_MAX_RETRIES: 4
  HEALTH_CHECK_MAX_RETRY_INTERVAL_SECONDS: 10
  HEALTH_CHECK_SUCCESS_THRESHOLD: 10
  CAPACITY_LIMIT: '{"type":"percentage", "value":80}'
  SIWF_URL: 'https://projectlibertylabs.github.io/siwf/v1/ui'
  IPFS_ENDPOINT: ${IPFS_ENDPOINT:-http://ipfs:5001}
  IPFS_GATEWAY_URL: ${IPFS_GATEWAY_URL:-https://ipfs.io/ipfs/[CID]}
  IPFS_BASIC_AUTH_USER: ${IPFS_BASIC_AUTH_USER:-""}
  IPFS_BASIC_AUTH_SECRET: ${IPFS_BASIC_AUTH_SECRET:-""}
  QUEUE_HIGH_WATER: 1000
  CHAIN_ENVIRONMENT: dev
  DEBUG: true

x-content-publishing-env: &content-publishing-env
  START_PROCESS: content-publishing-api
  FILE_UPLOAD_MAX_SIZE_IN_BYTES: 500000000
  FILE_UPLOAD_COUNT_LIMIT: 10
  ASSET_EXPIRATION_INTERVAL_SECONDS: 300
  BATCH_INTERVAL_SECONDS: 12
  BATCH_MAX_COUNT: 1000
  ASSET_UPLOAD_VERIFICATION_DELAY_SECONDS: 5
  CACHE_KEY_PREFIX: 'content-publishing:'

x-content-watcher-env: &content-watcher-env
  STARTING_BLOCK: 759882
  BLOCKCHAIN_SCAN_INTERVAL_SECONDS: 6
  WEBHOOK_FAILURE_THRESHOLD: 4
  CACHE_KEY_PREFIX: 'content-watcher:'

x-graph-service-env: &graph-service-env
  DEBOUNCE_SECONDS: 10
  GRAPH_ENVIRONMENT_TYPE: Mainnet
  CACHE_KEY_PREFIX: 'graph:'
  AT_REST_ENCRYPTION_KEY_SEED: 'This should get injected as a secret'

x-account-service-env: &account-service-env
  BLOCKCHAIN_SCAN_INTERVAL_SECONDS: 1
  TRUST_UNFINALIZED_BLOCKS: true
  WEBHOOK_BASE_URL: 'http://mock-webhook-logger:${ACCOUNT_WEBHOOK_PORT:-3001}/webhooks/account-service'
  GRAPH_ENVIRONMENT_TYPE: Mainnet
  CACHE_KEY_PREFIX: 'account:'

services:
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - gateway-net
    volumes:
      - redis_data:/data/redis

  bull:
    image: redis:latest
    ports:
      - 6380:6379
    networks:
      - gateway-net
    volumes:
      - bull_data:/data/redis

  frequency:
    # Temporary workaround until Frequency mainnet schemas are properly named and included in the image
    image: dsnp/instant-seal-node-with-deployed-schemas:latest
    # We need to specify the platform because it's the only image
    # built by Frequency at the moment, and auto-pull won't work otherwise
    platform: linux/amd64
    # Uncomment SEALING_MODE and SEALING_INTERVAL if you want to use interval sealing.
    # Other options you may want to add depending on your test scenario.
    environment:
      - SEALING_MODE=interval
      - SEALING_INTERVAL=1
    #   - CREATE_EMPTY_BLOCKS=true
    # The 'command' may contain additional CLI options to the Frequency node,
    # such as:
    # --state-pruning=archive
    command: --offchain-worker=always --enable-offchain-indexing=true
    ports:
      - 9944:9944
    networks:
      - gateway-net
    volumes:
      - chainstorage:/data
    profiles:
      - local-node

  ipfs:
    image: ipfs/kubo:latest
    ports:
      - 4001:4001
      - 127.0.0.1:5001:5001
      - 127.0.0.1:8080:8080
    networks:
      - gateway-net
    volumes:
      - ipfs_data:${IPFS_VOLUME:-/data/ipfs}

  gateway-base:
    pull_policy: never
    image: gateway-dev:latest
    build:
      context: .
      dockerfile: Docker/Dockerfile.dev
      tags:
        - gateway-dev:latest

  content-publishing-service-api:
    pull_policy: never
    image: gateway-dev:latest
    ports:
      - ${SERVICE_PORT_0:-3010}:3000
    command: make start-content-publishing-api
    environment:
      <<: [*common-environment, *content-publishing-env]
      START_PROCESS: content-publishing-api
    volumes:
      - ./:/app
      - content_publishing_api_node_cache:/app/node_modules
    depends_on:
      - redis
      - ipfs
      - gateway-base
    networks:
      - gateway-net

  content-publishing-service-worker:
    pull_policy: never
    image: gateway-dev:latest
    command: make start-content-publishing-worker
    environment:
      <<: [*common-environment, *content-publishing-env]
      START_PROCESS: content-publishing-worker
    volumes:
      - ./:/app
      - content_publishing_worker_node_cache:/app/node_modules
    depends_on:
      - redis
      - ipfs
      - gateway-base
    networks:
      - gateway-net

  content-watcher-service:
    pull_policy: never
    image: gateway-dev:latest
    ports:
      - ${SERVICE_PORT_1:-3011}:3000
    command: make start-content-watcher
    environment:
      <<: [*common-environment, *content-watcher-env]
    volumes:
      - ./:/app
      - content_watcher_node_cache:/app/node_modules
    depends_on:
      - redis
      - ipfs
      - gateway-base
    networks:
      - gateway-net

  graph-service-api:
    pull_policy: never
    image: gateway-dev:latest
    ports:
      - ${SERVICE_PORT_2:-3012}:3000
    command: make start-graph-api
    environment:
      <<: [*common-environment, *graph-service-env]
      START_PROCESS: graph-api
    volumes:
      - ./:/app
      - graph_api_node_cache:/app/node_modules
    depends_on:
      - redis
      - gateway-base
    networks:
      - gateway-net

  graph-service-worker:
    pull_policy: never
    image: gateway-dev:latest
    command: make start-graph-worker
    environment:
      <<: [*common-environment, *graph-service-env]
      START_PROCESS: graph-worker
    volumes:
      - ./:/app
      - graph_worker_node_cache:/app/node_modules
    depends_on:
      - redis
      - gateway-base
    networks:
      - gateway-net

  account-service-api:
    pull_policy: never
    image: gateway-dev:latest
    ports:
      - ${SERVICE_PORT_3:-3013}:3000
    environment:
      <<: [*common-environment, *account-service-env]
    command: make start-account-api
    volumes:
      - ./:/app
      - account_api_node_cache:/app/node_modules
    depends_on:
      - redis
      - gateway-base
    networks:
      - gateway-net

  account-service-worker:
    pull_policy: never
    image: gateway-dev:latest
    command: make start-account-worker
    environment:
      <<: [*common-environment, *account-service-env]
    volumes:
      - ./:/app
      - account_worker_node_cache:/app/node_modules
    depends_on:
      - redis
      - gateway-base

    networks:
      - gateway-net

  mock-webhook-logger:
    pull_policy: never
    image: mock-webhook-logger:latest
    build:
      context: .
      dockerfile: Docker/Dockerfile.mock-webhook-logger
      tags:
        - mock-webhook-logger:latest
    ports:
      - ${ACCOUNT_WEBHOOK_PORT:-3001}:3001
    profiles:
      - webhook
    networks:
      - gateway-net


volumes:
  ipfs_data:
  chainstorage:
    external: false
  redis_data:
  bull_data:
  account_api_node_cache:
  account_worker_node_cache:
  graph_api_node_cache:
  graph_worker_node_cache:
  content_publishing_api_node_cache:
  content_publishing_worker_node_cache:
  content_watcher_node_cache:

networks:
  gateway-net:
