# Copy this file to ".env.dev" and ".env.docker.dev", and then tweak values for local development

# How many seconds to delay between successive scans of the chain
# for new content (after end of chain is reached)
BLOCKCHAIN_SCAN_INTERVAL_SECONDS=6

# Whether to examine blocks that have not been finalized when tracking extrinsic completion
TRUST_UNFINALIZED_BLOCKS=false

# URL to IPFS endpoint
# IPFS_ENDPOINT="https://ipfs.infura.io:5001/api/v0"
IPFS_ENDPOINT="http://127.0.0.1:5001/api/v0"

# If using Infura, put Project ID here, or leave blank for Kubo RPC
# IPFS_BASIC_AUTH_USER=

# If using Infura, put auth token here, or leave blank for Kubo RPC
IPFS_BASIC_AUTH_SECRET=

# IPFS gateway URL. '[CID]' is a token that will be replaced with an actual content ID
# IPFS_GATEWAY_URL="https://ipfs.io/ipfs/[CID]"
IPFS_GATEWAY_URL="http://127.0.0.1:8080/ipfs/[CID]"

# Blockchain node address, used to access the blockchain API
FREQUENCY_API_WS_URL=ws://0.0.0.0:9944

# Timeout value (seconds) for connection to chain
FREQUENCY_TIMEOUT_SECS=10

PROVIDER_ID=1

# Redis URL
# Only one of REDIS_URL or REDIS_OPTIONS may be specified.
# Additional Redis options may be specified as query parameters.
# See https://ioredis.readthedocs.io/en/latest/API/#new-redisport-host-options
REDIS_URL=redis://0.0.0.0:6379?commandTimeout=10000
# REDIS_URL=redis://redis:6379                        #docker dev

# Redis client options as a JSON object string.
# Only one of REDIS_URL or REDIS_OPTIONS may be specified.
# See https://ioredis.readthedocs.io/en/latest/API/#new-redisport-host-options
# REDIS_OPTIONS='{"host": "0.0.0.0", "port": 6379, "commandTimeout":10000, "tls": true}' # equivalent to 'rediss://0.0.0.0:6379?commandTimeout=10000'
# REDIS_OPTIONS='{"host": "0.0.0.0", "port": 6379, "commandTimeout":10000}' # equivalent to 'redis://0.0.0.0:6379?commandTimeout=10000'

PROVIDER_ACCOUNT_SEED_PHRASE="//Alice"
CAPACITY_LIMIT='{"serviceLimit":{"type":"percentage","value":"80"}}'

# Port that the application REST endpoints listen on
API_PORT=3000
WORKER_API_PORT=3001

# # NOTE: This is to be removed once the `v1/asset/upload` endpoint is removed in favor of the v2 streaming endpoint
# Max file size allowed for asset upload
FILE_UPLOAD_MAX_SIZE_IN_BYTES=500000000

# Max number of files to be able to upload at the same time via one upload call
FILE_UPLOAD_COUNT_LIMIT=10

# Number of seconds to keep completed asset entries in the cache
# before expiring them
ASSET_EXPIRATION_INTERVAL_SECONDS=300

# Number of seconds between publishing batches.
# This is so that the service waits a reasonable amount of time for
# additional content to publish before submitting a batch--it represents
# a trade-off between maximum batch fullness and minimal wait time for content
BATCH_INTERVAL_SECONDS=6

# Maximum number of items that can be submitted in a single batch
BATCH_MAX_COUNT=1000

# Base delay in seconds used for exponential backoff while waiting for
# uploaded assets to be verified available before publishing a content notice.
ASSET_UPLOAD_VERIFICATION_DELAY_SECONDS=5

# Prefix to use for Redis cache keys
CACHE_KEY_PREFIX=content-publishing:

# Api timeout limit in milliseconds
API_TIMEOUT_MS=30000

# Api json body size limit in string (some examples: 100kb or 5mb or etc)
API_BODY_JSON_LIMIT=1mb

# Timeout in milliseconds to wait for a response as part of a request to an HTTP endpoint
# Make sure this is always < API_TIMEOUT_MS
HTTP_RESPONSE_TIMEOUT_MS=3000

# Enable debug mode for development
LOG_LEVEL=debug

# Make output pretty-printed instead of JSON
PRETTY=true

