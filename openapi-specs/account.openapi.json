{
  "openapi": "3.0.0",
  "paths": {
    "/v2/accounts/siwf": {
      "get": {
        "operationId": "AccountsControllerV2_getRedirectUrl",
        "summary": "Get the Sign In With Frequency Redirect URL",
        "parameters": [
          {
            "name": "credentials",
            "required": false,
            "in": "query",
            "description": "List of credentials using the types: \"VerifiedGraphKeyCredential\", \"VerifiedEmailAddressCredential\", and \"VerifiedPhoneNumberCredential\". Note that Contact related verifiable credentials will be nested into an anyOf request form.",
            "schema": {
              "example": [
                "VerifiedGraphKeyCredential",
                "VerifiedEmailAddressCredential",
                "VerifiedPhoneNumberCredential"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "permissions",
            "required": false,
            "in": "query",
            "description": "The list of permissions using the Frequency Schema names and versions. Pattern: `<namespace>.<name>@v<version integer>` e.g. `dsnp.broadcast@v2`",
            "schema": {
              "example": [
                "dsnp.broadcast@v2",
                "dsnp.private-follows@v1",
                "dsnp.reply@v2",
                "dsnp.reaction@v1",
                "dsnp.tombstone@v2",
                "dsnp.update@v2",
                "frequency.default-token-address@v1"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "callbackUrl",
            "required": true,
            "in": "query",
            "description": "The URL that will be called when the authentication process is completed",
            "schema": {
              "example": "http://localhost:3000/login/callback",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIWF Redirect URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletV2RedirectResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "v2/accounts"
        ]
      },
      "post": {
        "operationId": "AccountsControllerV2_postSignInWithFrequency",
        "summary": "Process the result of a Sign In With Frequency v2 callback",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletV2LoginRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletV2LoginResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "v2/accounts"
        ]
      }
    },
    "/v1/accounts/siwf": {
      "get": {
        "operationId": "AccountsControllerV1_getSIWFConfig",
        "summary": "Get the Sign In With Frequency configuration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returned SIWF Configuration data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletLoginConfigResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "v1/accounts"
        ]
      },
      "post": {
        "operationId": "AccountsControllerV1_postSignInWithFrequency",
        "summary": "Request to Sign In With Frequency",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletLoginRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletLoginResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "v1/accounts"
        ]
      }
    },
    "/v1/accounts/{msaId}": {
      "get": {
        "operationId": "AccountsControllerV1_getAccountForMsa",
        "summary": "Fetch an account given an MSA Id",
        "parameters": [
          {
            "name": "msaId",
            "required": true,
            "in": "path",
            "description": "Msa Id of requested account",
            "schema": {
              "example": "2",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "v1/accounts"
        ]
      }
    },
    "/v1/accounts/account/{accountId}": {
      "get": {
        "operationId": "AccountsControllerV1_getAccountForAccountId",
        "summary": "Fetch an account given an Account Id",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "AccountId in hex or SS58 format",
            "schema": {
              "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "v1/accounts"
        ]
      }
    },
    "/v1/accounts/retireMsa/{accountId}": {
      "get": {
        "operationId": "AccountsControllerV1_getRetireMsaPayload",
        "summary": "Get a retireMsa unsigned, encoded extrinsic payload.",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "AccountId in hex or SS58 format",
            "schema": {
              "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created extrinsic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetireMsaPayloadResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "v1/accounts"
        ]
      }
    },
    "/v1/accounts/retireMsa": {
      "post": {
        "operationId": "AccountsControllerV1_postRetireMsa",
        "summary": "Request to retire an MSA ID.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetireMsaRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created and queued request to retire an MSA ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "v1/accounts"
        ]
      }
    },
    "/v2/delegations/{msaId}": {
      "get": {
        "operationId": "DelegationsControllerV2_getDelegation",
        "summary": "Get all delegation information associated with an MSA Id",
        "parameters": [
          {
            "name": "msaId",
            "required": true,
            "in": "path",
            "description": "MSA Id of the user requesting the delegation",
            "schema": {
              "example": "3",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found delegation information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationResponseV2"
                }
              }
            }
          }
        },
        "tags": [
          "delegations"
        ]
      }
    },
    "/v2/delegations/{msaId}/{providerId}": {
      "get": {
        "operationId": "DelegationsControllerV2_getProviderDelegation",
        "summary": "Get an MSA's delegation information for a specific provider",
        "parameters": [
          {
            "name": "msaId",
            "required": true,
            "in": "path",
            "description": "MSA Id of the user requesting the delegation",
            "schema": {
              "example": "3",
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "required": false,
            "in": "path",
            "description": "MSA Id of the provider to whom the requesting user wishes to delegate",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found delegation information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationResponseV2"
                }
              }
            }
          }
        },
        "tags": [
          "delegations"
        ]
      }
    },
    "/v1/delegation/{msaId}": {
      "get": {
        "operationId": "DelegationControllerV1_getDelegation",
        "summary": "Get the delegation information associated with an MSA Id",
        "parameters": [
          {
            "name": "msaId",
            "required": true,
            "in": "path",
            "description": "Msa Id of requested account",
            "schema": {
              "example": "2",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found delegation information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationResponse"
                }
              }
            }
          }
        },
        "tags": [
          "delegation"
        ]
      }
    },
    "/v1/delegation/revokeDelegation/{accountId}/{providerId}": {
      "get": {
        "operationId": "DelegationControllerV1_getRevokeDelegationPayload",
        "summary": "Get a properly encoded RevokeDelegationPayload that can be signed",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "AccountId in hex or SS58 format",
            "schema": {
              "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N",
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "description": "Msa Id of provider",
            "schema": {
              "example": "1",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned an encoded RevokeDelegationPayload for signing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeDelegationPayloadResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "delegation"
        ]
      }
    },
    "/v1/delegation/revokeDelegation": {
      "post": {
        "operationId": "DelegationControllerV1_postRevokeDelegation",
        "summary": "Request to revoke a delegation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeDelegationPayloadRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created and queued request to revoke a delegation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "delegation"
        ]
      }
    },
    "/v1/handles": {
      "post": {
        "operationId": "HandlesControllerV1_createHandle",
        "summary": "Request to create a new handle for an account",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HandleRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Handle creation request enqueued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "v1/handles"
        ]
      }
    },
    "/v1/handles/change": {
      "post": {
        "operationId": "HandlesControllerV1_changeHandle",
        "summary": "Request to change a handle",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HandleRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Handle change request enqueued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "v1/handles"
        ]
      }
    },
    "/v1/handles/change/{newHandle}": {
      "get": {
        "operationId": "HandlesControllerV1_getChangeHandlePayload",
        "summary": "Get a properly encoded ClaimHandlePayload that can be signed.",
        "parameters": [
          {
            "name": "newHandle",
            "required": true,
            "in": "path",
            "description": "newHandle in the request",
            "schema": {
              "minLength": 3,
              "example": "handle",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned an encoded ClaimHandlePayload for signing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeHandlePayloadRequest"
                }
              }
            }
          }
        },
        "tags": [
          "v1/handles"
        ]
      }
    },
    "/v1/handles/{msaId}": {
      "get": {
        "operationId": "HandlesControllerV1_getHandle",
        "summary": "Fetch a handle given an MSA Id",
        "parameters": [
          {
            "name": "msaId",
            "required": true,
            "in": "path",
            "description": "Msa Id of requested account",
            "schema": {
              "example": "2",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found a handle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandleResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "v1/handles"
        ]
      }
    },
    "/v1/keys/add": {
      "post": {
        "operationId": "KeysControllerV1_addKey",
        "summary": "Add new control keys for an MSA Id",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Found public keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "v1/keys"
        ]
      }
    },
    "/v1/keys/{msaId}": {
      "get": {
        "operationId": "KeysControllerV1_getKeys",
        "summary": "Fetch public keys given an MSA Id",
        "parameters": [
          {
            "name": "msaId",
            "required": true,
            "in": "path",
            "description": "Msa Id of requested account",
            "schema": {
              "example": "2",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found public keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysResponse"
                }
              }
            }
          }
        },
        "tags": [
          "v1/keys"
        ]
      }
    },
    "/v1/keys/publicKeyAgreements/getAddKeyPayload": {
      "get": {
        "operationId": "KeysControllerV1_getPublicKeyAgreementsKeyPayload",
        "summary": "Get a properly encoded StatefulStorageItemizedSignaturePayloadV2 that can be signed.",
        "parameters": [
          {
            "name": "msaId",
            "required": true,
            "in": "query",
            "description": "MSA Id representing the target of this request",
            "schema": {
              "example": "3",
              "type": "string"
            }
          },
          {
            "name": "newKey",
            "required": true,
            "in": "query",
            "description": "New public key to be added to the account (32-byte value in hex format)",
            "schema": {
              "example": "0x0ed2f8c714efcac51ca2325cfe95637e5e0b898ae397aa365978b7348a717d0b",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned an encoded StatefulStorageItemizedSignaturePayloadV2 for signing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewPublicKeyAgreementPayloadRequest"
                }
              }
            }
          }
        },
        "tags": [
          "v1/keys"
        ]
      }
    },
    "/v1/keys/publicKeyAgreements": {
      "post": {
        "operationId": "KeysControllerV1_AddNewPublicKeyAgreements",
        "summary": "Request to add a new public Key",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewPublicKeyAgreementRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add new key request enqueued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "v1/keys"
        ]
      }
    },
    "/healthz": {
      "get": {
        "operationId": "HealthController_healthz",
        "summary": "Check the health status of the service",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is healthy"
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/livez": {
      "get": {
        "operationId": "HealthController_livez",
        "summary": "Check the live status of the service",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is live"
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/readyz": {
      "get": {
        "operationId": "HealthController_readyz",
        "summary": "Check the ready status of the service",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is ready"
          }
        },
        "tags": [
          "health"
        ]
      }
    }
  },
  "info": {
    "title": "Account Service",
    "description": "Account Service API",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "WalletV2RedirectResponseDto": {
        "type": "object",
        "properties": {
          "signedRequest": {
            "type": "string",
            "description": "The base64url encoded JSON stringified signed request",
            "example": "eyJyZXF1ZXN0ZWRTaWduYXR1cmVzIjp7InB1YmxpY0tleSI6eyJlbmNvZGVkVmFsdWUiOiJmNmNMNHdxMUhVTngxMVRjdmRBQk5mOVVOWFhveUg0N21WVXdUNTl0elNGUlc4eURIIiwiZW5jb2RpbmciOiJiYXNlNTgiLCJmb3JtYXQiOiJzczU4IiwidHlwZSI6IlNyMjU1MTkifSwic2lnbmF0dXJlIjp7ImFsZ28iOiJTcjI1NTE5IiwiZW5jb2RpbmciOiJiYXNlMTYiLCJlbmNvZGVkVmFsdWUiOiIweDA0MDdjZTgxNGI3Nzg2MWRmOTRkMTZiM2ZjYjMxN2QzN2EwN2FiYzJhN2Y5Y2Q3YzAyY2MyMjUyOWVlN2IzMmQ1Njc5NWY4OGJkNmI0YWQxMDZiNzJiOTFiNjI0NmE3ODM2NzFiY2QyNGNiMDFhYWYwZTkzMTZkYjVlMGNkMDg1In0sInBheWxvYWQiOnsiY2FsbGJhY2siOiJodHRwOi8vbG9jYWxob3N0OjMwMDAiLCJwZXJtaXNzaW9ucyI6WzUsNyw4LDksMTBdfX0sInJlcXVlc3RlZENyZWRlbnRpYWxzIjpbeyJ0eXBlIjoiVmVyaWZpZWRHcmFwaEtleUNyZWRlbnRpYWwiLCJoYXNoIjpbImJjaXFtZHZteGQ1NHp2ZTVraWZ5Y2dzZHRvYWhzNWVjZjRoYWwydHMzZWV4a2dvY3ljNW9jYTJ5Il19LHsiYW55T2YiOlt7InR5cGUiOiJWZXJpZmllZEVtYWlsQWRkcmVzc0NyZWRlbnRpYWwiLCJoYXNoIjpbImJjaXFlNHFvY3poZnRpY2k0ZHpmdmZiZWw3Zm80aDRzcjVncmNvM29vdnd5azZ5NHluZjQ0dHNpIl19LHsidHlwZSI6IlZlcmlmaWVkUGhvbmVOdW1iZXJDcmVkZW50aWFsIiwiaGFzaCI6WyJiY2lxanNwbmJ3cGMzd2p4NGZld2NlazVkYXlzZGpwYmY1eGppbXo1d251NXVqN2UzdnUydXducSJdfV19XX0"
          },
          "frequencyRpcUrl": {
            "type": "string",
            "description": "A publically available Frequency node for SIWF dApps to connect to the correct chain",
            "example": "wss://1.rpc.frequency.xyz"
          },
          "redirectUrl": {
            "type": "string",
            "description": "The compiled redirect url with all the parameters already built in",
            "example": "https://testnet.frequencyaccess.com/siwa/start?signedRequest=eyJyZXF1ZXN0ZWRTaWduYXR1cmVzIjp7InB1YmxpY0tleSI6eyJlbmNvZGVkVmFsdWUiOiJmNmNMNHdxMUhVTngxMVRjdmRBQk5mOVVOWFhveUg0N21WVXdUNTl0elNGUlc4eURIIiwiZW5jb2RpbmciOiJiYXNlNTgiLCJmb3JtYXQiOiJzczU4IiwidHlwZSI6IlNyMjU1MTkifSwic2lnbmF0dXJlIjp7ImFsZ28iOiJTcjI1NTE5IiwiZW5jb2RpbmciOiJiYXNlMTYiLCJlbmNvZGVkVmFsdWUiOiIweDA0MDdjZTgxNGI3Nzg2MWRmOTRkMTZiM2ZjYjMxN2QzN2EwN2FiYzJhN2Y5Y2Q3YzAyY2MyMjUyOWVlN2IzMmQ1Njc5NWY4OGJkNmI0YWQxMDZiNzJiOTFiNjI0NmE3ODM2NzFiY2QyNGNiMDFhYWYwZTkzMTZkYjVlMGNkMDg1In0sInBheWxvYWQiOnsiY2FsbGJhY2siOiJodHRwOi8vbG9jYWxob3N0OjMwMDAiLCJwZXJtaXNzaW9ucyI6WzUsNyw4LDksMTBdfX0sInJlcXVlc3RlZENyZWRlbnRpYWxzIjpbeyJ0eXBlIjoiVmVyaWZpZWRHcmFwaEtleUNyZWRlbnRpYWwiLCJoYXNoIjpbImJjaXFtZHZteGQ1NHp2ZTVraWZ5Y2dzZHRvYWhzNWVjZjRoYWwydHMzZWV4a2dvY3ljNW9jYTJ5Il19LHsiYW55T2YiOlt7InR5cGUiOiJWZXJpZmllZEVtYWlsQWRkcmVzc0NyZWRlbnRpYWwiLCJoYXNoIjpbImJjaXFlNHFvY3poZnRpY2k0ZHpmdmZiZWw3Zm80aDRzcjVncmNvM29vdnd5azZ5NHluZjQ0dHNpIl19LHsidHlwZSI6IlZlcmlmaWVkUGhvbmVOdW1iZXJDcmVkZW50aWFsIiwiaGFzaCI6WyJiY2lxanNwbmJ3cGMzd2p4NGZld2NlazVkYXlzZGpwYmY1eGppbXo1d251NXVqN2UzdnUydXducSJdfV19XX0"
          }
        },
        "required": [
          "signedRequest",
          "frequencyRpcUrl",
          "redirectUrl"
        ]
      },
      "WalletV2LoginRequestDto": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "type": "string",
            "description": "The code returned from the SIWF v2 Authentication service that can be exchanged for the payload. Required unless an `authorizationPayload` is provided.",
            "example": "680a0a68-6d3b-4d6d-89b7-0b01a6f7e86f"
          },
          "authorizationPayload": {
            "type": "string",
            "description": "The SIWF v2 Authentication payload as a JSON stringified and base64url encoded value. Required unless an `authorizationCode` is provided.",
            "example": "ew0KICAidXNlclB1YmxpY0tleSI6IHsNCiAgICAiZW5jb2RlZFZhbHVlIjogIjVIWUhaOGU4a3lMRUJ1RWJzRmEyYndLWWJWU01nYVVoeW1mUlZnSDdDdU00VkNIdiIsDQogICAgImVuY29kaW5nIjogImJhc2U1OCIsDQogICAgImZvcm1hdCI6ICJzczU4IiwNCiAgICAidHlwZSI6ICJTcjI1NTE5Ig0KICB9LA0KICAidXNlcktleXMiOiBbDQogICAgew0KICAgICAgImVuY29kZWRQdWJsaWNLZXlWYWx1ZSI6ICIweGJkODk2ZmQ1NTAxZWVhMjU5ZjQ3OTg0MTVjOWZhNDQ3ZDU4ODIwZDk5YjkyNDA2NzFhNmYzNGYwYmMwM2IwMzAiLA0KICAgICAgImVuY29kZWRQcml2YXRlS2V5VmFsdWUiOiAiMHhmODExNWQzZTUwYzg2MTYzODZmMDY2ZjY1OTdlZmYwYzU3MGQ2N2M3ZTVjZDkzNjU1Njg4NGJjYzk5NDNmNDY0IiwNCiAgICAgICJlbmNvZGluZyI6ICJiYXNlMTYiLA0KICAgICAgImZvcm1hdCI6ICJiYXJlIiwNCiAgICAgICJ0eXBlIjogIlgyNTUxOSIsDQogICAgICAia2V5VHlwZSI6ICJkc25wLnB1YmxpYy1rZXkta2V5LWFncmVlbWVudCINCiAgICB9DQogIF0sDQogICJwYXlsb2FkcyI6IFsNCiAgICB7DQogICAgICAic2lnbmF0dXJlIjogew0KICAgICAgICAiYWxnbyI6ICJTUjI1NTE5IiwNCiAgICAgICAgImVuY29kaW5nIjogImJhc2UxNiIsDQogICAgICAgICJlbmNvZGVkVmFsdWUiOiAiMHgzMmFlYWViZWZmNWU4ZTEzODM3ZTg3YzQ5MWI0Mzc4MTE1MjYxZWU3NTFjYmYzYTc1ZTY5MmJiNzFhMWNmYzU3ZGRkZDhhODliYjZiNTE3ZjBiNGMyOWI0ZmFlOGUyNjQxZjM2MTEwMWNjMzg5ZmU0OTFmNTQ0NTM0ODFkZmU4OSINCiAgICAgIH0sDQogICAgICAiZW5kcG9pbnQiOiB7DQogICAgICAgICJwYWxsZXQiOiAibXNhIiwNCiAgICAgICAgImV4dHJpbnNpYyI6ICJjcmVhdGVTcG9uc29yZWRBY2NvdW50V2l0aERlbGVnYXRpb24iDQogICAgICB9LA0KICAgICAgInR5cGUiOiAiYWRkUHJvdmlkZXIiLA0KICAgICAgInBheWxvYWQiOiB7DQogICAgICAgICJhdXRob3JpemVkTXNhSWQiOiA3MjksDQogICAgICAgICJzY2hlbWFJZHMiOiBbDQogICAgICAgICAgNiwNCiAgICAgICAgICA3LA0KICAgICAgICAgIDgsDQogICAgICAgICAgOSwNCiAgICAgICAgICAxMA0KICAgICAgICBdLA0KICAgICAgICAiZXhwaXJhdGlvbiI6IDE2MDc1MzgNCiAgICAgIH0NCiAgICB9LA0KICAgIHsNCiAgICAgICJzaWduYXR1cmUiOiB7DQogICAgICAgICJhbGdvIjogIlNSMjU1MTkiLA0KICAgICAgICAiZW5jb2RpbmciOiAiYmFzZTE2IiwNCiAgICAgICAgImVuY29kZWRWYWx1ZSI6ICIweDFhMGI1ZDdkNWNhNzg4Y2VmZDE4NDk3ZDc5NzJkYTk5YzQ3NmI3NTA0YzY5MzNiYzUyYTZkZTA2NWI5NGE3NTFmMzI5Mjg5N2QzMjEzODllOTAwZmQ1MmJmMzEyYzJiZGM3ODAwZWMwMzM2YmJmMTcyY2I3ZTE5ZjU1MjJlODg0Ig0KICAgICAgfSwNCiAgICAgICJlbmRwb2ludCI6IHsNCiAgICAgICAgInBhbGxldCI6ICJoYW5kbGVzIiwNCiAgICAgICAgImV4dHJpbnNpYyI6ICJjbGFpbUhhbmRsZSINCiAgICAgIH0sDQogICAgICAidHlwZSI6ICJjbGFpbUhhbmRsZSIsDQogICAgICAicGF5bG9hZCI6IHsNCiAgICAgICAgImJhc2VIYW5kbGUiOiAid2lsd2FkZSIsDQogICAgICAgICJleHBpcmF0aW9uIjogMTYwNzUzOA0KICAgICAgfQ0KICAgIH0sDQogICAgew0KICAgICAgInNpZ25hdHVyZSI6IHsNCiAgICAgICAgImFsZ28iOiAiU1IyNTUxOSIsDQogICAgICAgICJlbmNvZGluZyI6ICJiYXNlMTYiLA0KICAgICAgICAiZW5jb2RlZFZhbHVlIjogIjB4YTYxN2FhMzEzMDQzMjY1NWY2MjU1ZWQ5NTE5MGE0N2MzMTc1NTk2ZDIwODlkMmE0OGY0M2QyNTdhYWM5NzY0YWZmMmU5NDNmMmNmZThlOGEwMzBmN2RkNzMwODE5NTMyMTVkNzU2YTBiYmU5OGY3MjQ5OWIwMjk3YWY5ZmQ3ODIiDQogICAgICB9LA0KICAgICAgImVuZHBvaW50Ijogew0KICAgICAgICAicGFsbGV0IjogInN0YXRlZnVsU3RvcmFnZSIsDQogICAgICAgICJleHRyaW5zaWMiOiAiYXBwbHlJdGVtQWN0aW9uc1dpdGhTaWduYXR1cmVWMiINCiAgICAgIH0sDQogICAgICAidHlwZSI6ICJpdGVtQWN0aW9ucyIsDQogICAgICAicGF5bG9hZCI6IHsNCiAgICAgICAgInNjaGVtYUlkIjogNywNCiAgICAgICAgInRhcmdldEhhc2giOiAwLA0KICAgICAgICAiZXhwaXJhdGlvbiI6IDE2MDc1MzgsDQogICAgICAgICJhY3Rpb25zIjogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgICJ0eXBlIjogImFkZEl0ZW0iLA0KICAgICAgICAgICAgInBheWxvYWRIZXgiOiAiMHhiZDg5NmZkNTUwMWVlYTI1OWY0Nzk4NDE1YzlmYTQ0N2Q1ODgyMGQ5OWI5MjQwNjcxYTZmMzRmMGJjMDNiMDMwIg0KICAgICAgICAgIH0NCiAgICAgICAgXQ0KICAgICAgfQ0KICAgIH0NCiAgXSwNCiAgImNyZWRlbnRpYWxzIjogWw0KICAgIHsNCiAgICAgICJAY29udGV4dCI6IFsNCiAgICAgICAgImh0dHBzOi8vd3d3LnczLm9yZy9ucy9jcmVkZW50aWFscy92MiIsDQogICAgICAgICJodHRwczovL3d3dy53My5vcmcvbnMvY3JlZGVudGlhbHMvdW5kZWZpbmVkLXRlcm1zL3YyIg0KICAgICAgXSwNCiAgICAgICJ0eXBlIjogWw0KICAgICAgICAiVmVyaWZpZWRFbWFpbEFkZHJlc3NDcmVkZW50aWFsIiwNCiAgICAgICAgIlZlcmlmaWFibGVDcmVkZW50aWFsIg0KICAgICAgXSwNCiAgICAgICJpc3N1ZXIiOiAiZGlkOndlYjp0ZXN0bmV0LmZyZXF1ZW5jeWFjY2Vzcy5jb20iLA0KICAgICAgInZhbGlkRnJvbSI6ICIyMDI0LTEwLTEwVDEyOjUyOjIyLjgzNyswMDAwIiwNCiAgICAgICJjcmVkZW50aWFsU2NoZW1hIjogew0KICAgICAgICAidHlwZSI6ICJKc29uU2NoZW1hIiwNCiAgICAgICAgImlkIjogImh0dHBzOi8vc2NoZW1hcy5mcmVxdWVuY3lhY2Nlc3MuY29tL1ZlcmlmaWVkRW1haWxBZGRyZXNzQ3JlZGVudGlhbC9iY2lxZTRxb2N6aGZ0aWNpNGR6ZnZmYmVsN2ZvNGg0c3I1Z3JjbzNvb3Z3eWs2eTR5bmY0NHRzaS5qc29uIg0KICAgICAgfSwNCiAgICAgICJjcmVkZW50aWFsU3ViamVjdCI6IHsNCiAgICAgICAgImlkIjogImRpZDprZXk6ejZRUDJKdlJ1WFo1d1g3N0tLOGRMOG84UWNDVm5IeTg4UnRnM2NzVXcxdFNEcGRnIiwNCiAgICAgICAgImVtYWlsQWRkcmVzcyI6ICJ3aWwud2FkZUBwcm9qZWN0bGliZXJ0eS5pbyIsDQogICAgICAgICJsYXN0VmVyaWZpZWQiOiAiMjAyNC0xMC0xMFQxMjo1MTowMi4yODMrMDAwMCINCiAgICAgIH0sDQogICAgICAicHJvb2YiOiB7DQogICAgICAgICJ0eXBlIjogIkRhdGFJbnRlZ3JpdHlQcm9vZiIsDQogICAgICAgICJ2ZXJpZmljYXRpb25NZXRob2QiOiAiZGlkOndlYjp0ZXN0bmV0LmZyZXF1ZW5jeWFjY2Vzcy5jb20jejZNa3c0eVg0YzJaM3NlU1NkblI5c3ZFTjZGdjdVa1U4anJOUE1rTXd0WkNvQVZHIiwNCiAgICAgICAgImNyeXB0b3N1aXRlIjogImVkZHNhLXJkZmMtMjAyMiIsDQogICAgICAgICJwcm9vZlB1cnBvc2UiOiAiYXNzZXJ0aW9uTWV0aG9kIiwNCiAgICAgICAgInByb29mVmFsdWUiOiAiejR2Y0RMdEpoY054dnZXY0F3VWNhMUs4YmFCSmNBa2JTcnBwdEhFVG1TZ0FhYjJkc2RkR0gxSjczTFQzc3czUkRjUzdWTE1HRkN1WWluNTNxVFRtNWM2TVAiDQogICAgICB9DQogICAgfSwNCiAgICB7DQogICAgICAiQGNvbnRleHQiOiBbDQogICAgICAgICJodHRwczovL3d3dy53My5vcmcvbnMvY3JlZGVudGlhbHMvdjIiLA0KICAgICAgICAiaHR0cHM6Ly93d3cudzMub3JnL25zL2NyZWRlbnRpYWxzL3VuZGVmaW5lZC10ZXJtcy92MiINCiAgICAgIF0sDQogICAgICAidHlwZSI6IFsNCiAgICAgICAgIlZlcmlmaWVkR3JhcGhLZXlDcmVkZW50aWFsIiwNCiAgICAgICAgIlZlcmlmaWFibGVDcmVkZW50aWFsIg0KICAgICAgXSwNCiAgICAgICJpc3N1ZXIiOiAiZGlkOndlYjp0ZXN0bmV0LmZyZXF1ZW5jeWFjY2Vzcy5jb20iLA0KICAgICAgInZhbGlkRnJvbSI6ICIyMDI0LTEwLTEwVDEyOjUyOjIyLjgzOCswMDAwIiwNCiAgICAgICJjcmVkZW50aWFsU2NoZW1hIjogew0KICAgICAgICAidHlwZSI6ICJKc29uU2NoZW1hIiwNCiAgICAgICAgImlkIjogImh0dHBzOi8vc2NoZW1hcy5mcmVxdWVuY3lhY2Nlc3MuY29tL1ZlcmlmaWVkR3JhcGhLZXlDcmVkZW50aWFsL2JjaXFtZHZteGQ1NHp2ZTVraWZ5Y2dzZHRvYWhzNWVjZjRoYWwydHMzZWV4a2dvY3ljNW9jYTJ5Lmpzb24iDQogICAgICB9LA0KICAgICAgImNyZWRlbnRpYWxTdWJqZWN0Ijogew0KICAgICAgICAiaWQiOiAiZGlkOmtleTp6NlFQMkp2UnVYWjV3WDc3S0s4ZEw4bzhRY0NWbkh5ODhSdGczY3NVdzF0U0RwZGciLA0KICAgICAgICAiZW5jb2RlZFB1YmxpY0tleVZhbHVlIjogIjB4YmQ4OTZmZDU1MDFlZWEyNTlmNDc5ODQxNWM5ZmE0NDdkNTg4MjBkOTliOTI0MDY3MWE2ZjM0ZjBiYzAzYjAzMCIsDQogICAgICAgICJlbmNvZGVkUHJpdmF0ZUtleVZhbHVlIjogIjB4ZjgxMTVkM2U1MGM4NjE2Mzg2ZjA2NmY2NTk3ZWZmMGM1NzBkNjdjN2U1Y2Q5MzY1NTY4ODRiY2M5OTQzZjQ2NCIsDQogICAgICAgICJlbmNvZGluZyI6ICJiYXNlMTYiLA0KICAgICAgICAiZm9ybWF0IjogImJhcmUiLA0KICAgICAgICAidHlwZSI6ICJYMjU1MTkiLA0KICAgICAgICAia2V5VHlwZSI6ICJkc25wLnB1YmxpYy1rZXkta2V5LWFncmVlbWVudCINCiAgICAgIH0sDQogICAgICAicHJvb2YiOiB7DQogICAgICAgICJ0eXBlIjogIkRhdGFJbnRlZ3JpdHlQcm9vZiIsDQogICAgICAgICJ2ZXJpZmljYXRpb25NZXRob2QiOiAiZGlkOndlYjp0ZXN0bmV0LmZyZXF1ZW5jeWFjY2Vzcy5jb20jejZNa3c0eVg0YzJaM3NlU1NkblI5c3ZFTjZGdjdVa1U4anJOUE1rTXd0WkNvQVZHIiwNCiAgICAgICAgImNyeXB0b3N1aXRlIjogImVkZHNhLXJkZmMtMjAyMiIsDQogICAgICAgICJwcm9vZlB1cnBvc2UiOiAiYXNzZXJ0aW9uTWV0aG9kIiwNCiAgICAgICAgInByb29mVmFsdWUiOiAiejI5YWRmdG5lSG5LeHdSOWI3Z3RSanlrTFJlR0VwdU1pWTljS0hWQ0JTejZtWThjd0ZaaUZpQVdaSGV4R3R2Qjh0YmRwZmoyRzQzeFF6dFJ6dFdhd21IRjIiDQogICAgICB9DQogICAgfQ0KICBdDQp9"
          }
        }
      },
      "GraphKeySubject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id type of the VerifiedGraphKeyCredential.",
            "example": "did:key:z6QNucQV4AF1XMQV4kngbmnBHwYa6mVswPEGrkFrUayhttT1"
          },
          "encodedPublicKeyValue": {
            "type": "string",
            "description": "The encoded public key.",
            "example": "0xb5032900293f1c9e5822fd9c120b253cb4a4dfe94c214e688e01f32db9eedf17"
          },
          "encodedPrivateKeyValue": {
            "type": "string",
            "description": "The encoded private key. WARNING: This is sensitive user information!",
            "example": "0xd0910c853563723253c4ed105c08614fc8aaaf1b0871375520d72251496e8d87"
          },
          "encoding": {
            "type": "string",
            "description": "How the encoded keys are encoded. Only \"base16\" (aka hex) currently.",
            "example": "base16"
          },
          "format": {
            "type": "string",
            "description": "Any addition formatting options. Only: \"bare\" currently.",
            "example": "bare"
          },
          "type": {
            "type": "string",
            "description": "The encryption key algorithm.",
            "example": "X25519"
          },
          "keyType": {
            "type": "string",
            "description": "The DSNP key type.",
            "example": "dsnp.public-key-key-agreement"
          }
        },
        "required": [
          "id",
          "encodedPublicKeyValue",
          "encodedPrivateKeyValue",
          "encoding",
          "format",
          "type",
          "keyType"
        ]
      },
      "WalletV2LoginResponseDto": {
        "type": "object",
        "properties": {
          "controlKey": {
            "type": "string",
            "description": "The ss58 encoded MSA Control Key of the login.",
            "example": "f6cL4wq1HUNx11TcvdABNf9UNXXoyH47mVUwT59tzSFRW8yDH"
          },
          "msaId": {
            "type": "string",
            "description": "The user's MSA Id, if one is already created. Will be empty if it is still being processed.",
            "example": "314159265358979323846264338"
          },
          "email": {
            "type": "string",
            "description": "The users's validated email",
            "example": "user@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The users's validated SMS/Phone Number",
            "example": "555-867-5309"
          },
          "graphKey": {
            "description": "The users's Private Graph encryption key.",
            "example": "555-867-5309",
            "allOf": [
              {
                "$ref": "#/components/schemas/GraphKeySubject"
              }
            ]
          },
          "rawCredentials": {
            "description": "Raw parsed credentials received.",
            "example": [
              {
                "@context": [
                  "https://www.w3.org/ns/credentials/v2",
                  "https://www.w3.org/ns/credentials/undefined-terms/v2"
                ],
                "type": [
                  "VerifiedEmailAddressCredential",
                  "VerifiableCredential"
                ],
                "issuer": "did:web:frequencyaccess.com",
                "validFrom": "2024-08-21T21:28:08.289+0000",
                "credentialSchema": {
                  "type": "JsonSchema",
                  "id": "https://schemas.frequencyaccess.com/VerifiedEmailAddressCredential/bciqe4qoczhftici4dzfvfbel7fo4h4sr5grco3oovwyk6y4ynf44tsi.json"
                },
                "credentialSubject": {
                  "id": "did:key:z6QNucQV4AF1XMQV4kngbmnBHwYa6mVswPEGrkFrUayhttT1",
                  "emailAddress": "john.doe@example.com",
                  "lastVerified": "2024-08-21T21:27:59.309+0000"
                },
                "proof": {
                  "type": "DataIntegrityProof",
                  "verificationMethod": "did:web:frequencyaccess.com#z6MkofWExWkUvTZeXb9TmLta5mBT6Qtj58es5Fqg1L5BCWQD",
                  "cryptosuite": "eddsa-rdfc-2022",
                  "proofPurpose": "assertionMethod",
                  "proofValue": "z4jArnPwuwYxLnbBirLanpkcyBpmQwmyn5f3PdTYnxhpy48qpgvHHav6warjizjvtLMg6j3FK3BqbR2nuyT2UTSWC"
                }
              },
              {
                "@context": [
                  "https://www.w3.org/ns/credentials/v2",
                  "https://www.w3.org/ns/credentials/undefined-terms/v2"
                ],
                "type": [
                  "VerifiedGraphKeyCredential",
                  "VerifiableCredential"
                ],
                "issuer": "did:key:z6QNucQV4AF1XMQV4kngbmnBHwYa6mVswPEGrkFrUayhttT1",
                "validFrom": "2024-08-21T21:28:08.289+0000",
                "credentialSchema": {
                  "type": "JsonSchema",
                  "id": "https://schemas.frequencyaccess.com/VerifiedGraphKeyCredential/bciqmdvmxd54zve5kifycgsdtoahs5ecf4hal2ts3eexkgocyc5oca2y.json"
                },
                "credentialSubject": {
                  "id": "did:key:z6QNucQV4AF1XMQV4kngbmnBHwYa6mVswPEGrkFrUayhttT1",
                  "encodedPublicKeyValue": "0xb5032900293f1c9e5822fd9c120b253cb4a4dfe94c214e688e01f32db9eedf17",
                  "encodedPrivateKeyValue": "0xd0910c853563723253c4ed105c08614fc8aaaf1b0871375520d72251496e8d87",
                  "encoding": "base16",
                  "format": "bare",
                  "type": "X25519",
                  "keyType": "dsnp.public-key-key-agreement"
                },
                "proof": {
                  "type": "DataIntegrityProof",
                  "verificationMethod": "did:key:z6MktZ15TNtrJCW2gDLFjtjmxEdhCadNCaDizWABYfneMqhA",
                  "cryptosuite": "eddsa-rdfc-2022",
                  "proofPurpose": "assertionMethod",
                  "proofValue": "z2HHWwtWggZfvGqNUk4S5AAbDGqZRFXjpMYAsXXmEksGxTk4DnnkN3upCiL1mhgwHNLkxY3s8YqNyYnmpuvUke7jF"
                }
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "controlKey"
        ]
      },
      "WalletLoginConfigResponseDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string"
          },
          "siwfUrl": {
            "type": "string"
          },
          "frequencyRpcUrl": {
            "type": "string"
          }
        },
        "required": [
          "providerId",
          "siwfUrl",
          "frequencyRpcUrl"
        ]
      },
      "HandleResponseDto": {
        "type": "object",
        "properties": {
          "base_handle": {
            "type": "string"
          },
          "canonical_base": {
            "type": "string"
          },
          "suffix": {
            "type": "number"
          }
        },
        "required": [
          "base_handle",
          "canonical_base",
          "suffix"
        ]
      },
      "AccountResponseDto": {
        "type": "object",
        "properties": {
          "msaId": {
            "type": "string"
          },
          "handle": {
            "$ref": "#/components/schemas/HandleResponseDto"
          }
        },
        "required": [
          "msaId"
        ]
      },
      "SiwsPayloadDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "signature": {
            "type": "string",
            "description": "Signature of the payload",
            "example": "0x64f8dd8846ba72cbb1954761ec4b2e44b886abb4b4ef7455b869355f17b4ce4a601ad26eabc57a682244a97bc9a2001b59469ae76fea105b724e988967d4928d"
          }
        },
        "required": [
          "message",
          "signature"
        ]
      },
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Some error"
          }
        },
        "required": [
          "message"
        ]
      },
      "SignInResponseDto": {
        "type": "object",
        "properties": {
          "siwsPayload": {
            "$ref": "#/components/schemas/SiwsPayloadDto"
          },
          "error": {
            "$ref": "#/components/schemas/ErrorResponseDto"
          }
        }
      },
      "EncodedExtrinsicDto": {
        "type": "object",
        "properties": {
          "pallet": {
            "type": "string",
            "minLength": 1
          },
          "extrinsicName": {
            "type": "string",
            "minLength": 1
          },
          "encodedExtrinsic": {
            "type": "string",
            "description": "Hex-encoded representation of the extrinsic",
            "example": "0x00112233"
          }
        },
        "required": [
          "pallet",
          "extrinsicName",
          "encodedExtrinsic"
        ]
      },
      "SignUpResponseDto": {
        "type": "object",
        "properties": {
          "extrinsics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EncodedExtrinsicDto"
            }
          },
          "error": {
            "$ref": "#/components/schemas/ErrorResponseDto"
          }
        }
      },
      "WalletLoginRequestDto": {
        "type": "object",
        "properties": {
          "signIn": {
            "description": "The wallet login request information",
            "example": {
              "siwsPayload": {
                "message": "0x1234567890abcdef",
                "signature": "0x64f8dd8846ba72cbb1954761ec4b2e44b886abb4b4ef7455b869355f17b4ce4a601ad26eabc57a682244a97bc9a2001b59469ae76fea105b724e988967d4928d"
              },
              "err": {
                "message": "Error message"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SignInResponseDto"
              }
            ]
          },
          "signUp": {
            "$ref": "#/components/schemas/SignUpResponseDto"
          }
        }
      },
      "WalletLoginResponseDto": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string"
          },
          "msaId": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "referenceId"
        ]
      },
      "RetireMsaPayloadResponseDto": {
        "type": "object",
        "properties": {
          "encodedExtrinsic": {
            "type": "string",
            "description": "Hex-encoded representation of the \"RetireMsa\" extrinsic",
            "example": "0x1234"
          },
          "payloadToSign": {
            "type": "string",
            "description": "payload to be signed",
            "example": "0x1234"
          },
          "accountId": {
            "type": "string",
            "description": "AccountId in hex or SS58 format",
            "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N"
          }
        },
        "required": [
          "encodedExtrinsic",
          "payloadToSign",
          "accountId"
        ]
      },
      "RetireMsaRequestDto": {
        "type": "object",
        "properties": {
          "encodedExtrinsic": {
            "type": "string",
            "description": "Hex-encoded representation of the \"RetireMsa\" extrinsic",
            "example": "0x1234"
          },
          "payloadToSign": {
            "type": "string",
            "description": "payload to be signed",
            "example": "0x1234"
          },
          "accountId": {
            "type": "string",
            "description": "AccountId in hex or SS58 format",
            "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N"
          },
          "signature": {
            "type": "string",
            "description": "signature of the owner",
            "example": "0x01065d733ca151c9e65b78f2ba77348224d31647e6913c44ad2765c6e8ba06f834dc21d8182447d01c30f84a41d90a8f2e58001d825c6f0d61b0afe89f984eec85"
          }
        },
        "required": [
          "encodedExtrinsic",
          "payloadToSign",
          "accountId",
          "signature"
        ]
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string"
          }
        },
        "required": [
          "referenceId"
        ]
      },
      "SchemaDelegation": {
        "type": "object",
        "properties": {
          "schemaId": {
            "type": "number"
          },
          "revokedAtBlock": {
            "type": "number"
          }
        },
        "required": [
          "schemaId"
        ]
      },
      "Delegation": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string"
          },
          "schemaDelegations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaDelegation"
            }
          },
          "revokedAtBlock": {
            "type": "number"
          }
        },
        "required": [
          "providerId",
          "schemaDelegations"
        ]
      },
      "DelegationResponseV2": {
        "type": "object",
        "properties": {
          "msaId": {
            "type": "string"
          },
          "delegations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Delegation"
            }
          }
        },
        "required": [
          "msaId",
          "delegations"
        ]
      },
      "u32": {
        "type": "object",
        "properties": {}
      },
      "DelegationResponse": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string"
          },
          "schemaPermissions": {
            "type": "object"
          },
          "revokedAt": {
            "$ref": "#/components/schemas/u32"
          }
        },
        "required": [
          "providerId",
          "schemaPermissions",
          "revokedAt"
        ]
      },
      "RevokeDelegationPayloadResponseDto": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "AccountId in hex or SS58 format",
            "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N"
          },
          "providerId": {
            "type": "string",
            "description": "MSA Id of the provider to whom the requesting user wishes to delegate",
            "example": "3"
          },
          "encodedExtrinsic": {
            "type": "string",
            "description": "Hex-encoded representation of the \"revokeDelegation\" extrinsic",
            "example": "0x1234"
          },
          "payloadToSign": {
            "type": "string",
            "description": "payload to be signed",
            "example": "0x1234"
          }
        },
        "required": [
          "accountId",
          "providerId",
          "encodedExtrinsic",
          "payloadToSign"
        ]
      },
      "RevokeDelegationPayloadRequestDto": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "AccountId in hex or SS58 format",
            "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N"
          },
          "providerId": {
            "type": "string",
            "description": "MSA Id of the provider to whom the requesting user wishes to delegate",
            "example": "3"
          },
          "encodedExtrinsic": {
            "type": "string",
            "description": "Hex-encoded representation of the \"revokeDelegation\" extrinsic",
            "example": "0x1234"
          },
          "payloadToSign": {
            "type": "string",
            "description": "payload to be signed",
            "example": "0x1234"
          },
          "signature": {
            "type": "string",
            "description": "signature of the owner",
            "example": "0x01065d733ca151c9e65b78f2ba77348224d31647e6913c44ad2765c6e8ba06f834dc21d8182447d01c30f84a41d90a8f2e58001d825c6f0d61b0afe89f984eec85"
          }
        },
        "required": [
          "accountId",
          "providerId",
          "encodedExtrinsic",
          "payloadToSign",
          "signature"
        ]
      },
      "HandlePayloadDto": {
        "type": "object",
        "properties": {
          "baseHandle": {
            "type": "string",
            "description": "base handle in the request",
            "example": "handle",
            "minLength": 3
          },
          "expiration": {
            "type": "number",
            "description": "expiration block number for this payload",
            "example": 1
          }
        },
        "required": [
          "baseHandle",
          "expiration"
        ]
      },
      "HandleRequestDto": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "AccountId in hex or SS58 format",
            "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N"
          },
          "payload": {
            "$ref": "#/components/schemas/HandlePayloadDto"
          },
          "proof": {
            "type": "string",
            "description": "proof is the signature for the payload",
            "example": "0x065d733ca151c9e65b78f2ba77348224d31647e6913c44ad2765c6e8ba06f834dc21d8182447d01c30f84a41d90a8f2e58001d825c6f0d61b0afe89f984eec85"
          }
        },
        "required": [
          "accountId",
          "payload",
          "proof"
        ]
      },
      "ChangeHandlePayloadRequest": {
        "type": "object",
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/HandlePayloadDto"
          },
          "encodedPayload": {
            "type": "string",
            "description": "Raw encodedPayload is scale encoded of payload in hex format",
            "example": "0x012345"
          }
        },
        "required": [
          "payload",
          "encodedPayload"
        ]
      },
      "KeysRequestPayloadDto": {
        "type": "object",
        "properties": {
          "msaId": {
            "type": "string",
            "description": "MSA Id of the user requesting the new key",
            "example": "3"
          },
          "expiration": {
            "type": "number",
            "description": "expiration block number for this payload",
            "example": 1
          },
          "newPublicKey": {
            "type": "string",
            "description": "newPublicKey in hex format",
            "example": "0x0ed2f8c714efcac51ca2325cfe95637e5e0b898ae397aa365978b7348a717d0b"
          }
        },
        "required": [
          "msaId",
          "expiration",
          "newPublicKey"
        ]
      },
      "KeysRequestDto": {
        "type": "object",
        "properties": {
          "msaOwnerAddress": {
            "type": "string",
            "description": "msaOwnerAddress representing the target of this request",
            "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N"
          },
          "msaOwnerSignature": {
            "type": "string",
            "description": "msaOwnerSignature is the signature by msa owner",
            "example": "0x065d733ca151c9e65b78f2ba77348224d31647e6913c44ad2765c6e8ba06f834dc21d8182447d01c30f84a41d90a8f2e58001d825c6f0d61b0afe89f984eec85"
          },
          "newKeyOwnerSignature": {
            "type": "string",
            "description": "newKeyOwnerSignature is the signature with new key",
            "example": "0x065d733ca151c9e65b78f2ba77348224d31647e6913c44ad2765c6e8ba06f834dc21d8182447d01c30f84a41d90a8f2e58001d825c6f0d61b0afe89f984eec85"
          },
          "payload": {
            "$ref": "#/components/schemas/KeysRequestPayloadDto"
          }
        },
        "required": [
          "msaOwnerAddress",
          "msaOwnerSignature",
          "newKeyOwnerSignature",
          "payload"
        ]
      },
      "KeysResponse": {
        "type": "object",
        "properties": {
          "msaKeys": {
            "type": "object"
          }
        },
        "required": [
          "msaKeys"
        ]
      },
      "ItemActionType": {
        "type": "string",
        "description": "Action Item type",
        "enum": [
          "ADD_ITEM",
          "DELETE_ITEM"
        ]
      },
      "ItemActionDto": {
        "type": "object",
        "properties": {
          "type": {
            "example": "ADD_ITEM",
            "$ref": "#/components/schemas/ItemActionType"
          },
          "encodedPayload": {
            "type": "string",
            "description": "encodedPayload to be added",
            "example": "0x1234"
          },
          "index": {
            "type": "number",
            "description": "index of the item to be deleted",
            "example": 0
          }
        },
        "required": [
          "type"
        ]
      },
      "ItemizedSignaturePayloadDto": {
        "type": "object",
        "properties": {
          "actions": {
            "example": [
              {
                "type": "ADD_ITEM",
                "encodedPayload": "0x1122"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemActionDto"
            }
          },
          "schemaId": {
            "type": "number",
            "description": "schemaId related to the payload",
            "example": 1
          },
          "targetHash": {
            "type": "number",
            "description": "targetHash related to the stateful storage",
            "example": 1234
          },
          "expiration": {
            "type": "number",
            "description": "expiration block number for this payload",
            "example": 1
          }
        },
        "required": [
          "actions",
          "schemaId",
          "targetHash",
          "expiration"
        ]
      },
      "AddNewPublicKeyAgreementPayloadRequest": {
        "type": "object",
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/ItemizedSignaturePayloadDto"
          },
          "encodedPayload": {
            "type": "string",
            "description": "Raw encodedPayload to be signed",
            "example": "0x1234"
          }
        },
        "required": [
          "payload",
          "encodedPayload"
        ]
      },
      "AddNewPublicKeyAgreementRequestDto": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "AccountId in hex or SS58 format",
            "example": "1LSLqpLWXo7A7xuiRdu6AQPnBPNJHoQSu8DBsUYJgsNEJ4N"
          },
          "payload": {
            "$ref": "#/components/schemas/ItemizedSignaturePayloadDto"
          },
          "proof": {
            "type": "string",
            "description": "proof is the signature for the payload",
            "example": "0x065d733ca151c9e65b78f2ba77348224d31647e6913c44ad2765c6e8ba06f834dc21d8182447d01c30f84a41d90a8f2e58001d825c6f0d61b0afe89f984eec85"
          }
        },
        "required": [
          "accountId",
          "payload",
          "proof"
        ]
      }
    }
  }
}