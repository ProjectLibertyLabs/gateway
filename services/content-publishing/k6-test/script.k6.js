/*
 * Content Publishing Service API
 * Content Publishing Service API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.7.0-SNAPSHOT
 */

import http from 'k6/http';
import { check, group } from 'k6';

import {
  validContentNoUploadedAssets,
  validProfileNoUploadedAssets,
  validReaction,
  validReplyNoUploadedAssets,
} from '../apps/api/test/mockRequestData.ts';

import { getReferenceId, createContentWithAsset } from './helpers.js';

const BASE_URL = 'http://localhost:3000';

export const options = {
  vus: 30,
  duration: '10s',
  thresholds: {
    checks: ['rate>=0.995'],
    http_req_duration: ['avg<12000', 'p(95)<18000'],
    http_req_failed: ['rate<0.005'],
    http_reqs: ['rate>=25'],
  },
  noConnectionReuse: true,
};

export default function () {
  group('/v1/content/{userDsnpId}', () => {
    let userDsnpId = '1';
    // Request No. 1: ApiController_update with no assets
    {
      let url = BASE_URL + `/v1/content/${userDsnpId}`;
      const body = {
        targetContentHash: '0x7653423447AF',
        targetAnnouncementType: 'broadcast',
        content: validContentNoUploadedAssets,
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.put(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
    // Request No. 2: ApiController_update with assets
    {
      let url = BASE_URL + `/v1/content/${userDsnpId}`;
      const body = {
        targetContentHash: '0x7653423447AF',
        targetAnnouncementType: 'broadcast',
        content: createContentWithAsset(BASE_URL),
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.put(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }

    // Request No. 3: ApiController_delete
    {
      let url = BASE_URL + `/v1/content/${userDsnpId}`;
      let body = {
        targetContentHash: '0x7653423447AF',
        targetAnnouncementType: 'broadcast',
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      // this is a DELETE method request - if params are also set, empty body must be passed
      let request = http.del(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/healthz', () => {
    // Request No. 1: ApiController_health
    {
      let url = BASE_URL + `/healthz`;
      let request = http.get(url);

      check(request, {
        '': (r) => r.status === 200,
      });
    }
  });

  group('/v1/profile/{userDsnpId}', () => {
    let userDsnpId = '1'; // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: ApiController_profile with no assets
    {
      let url = BASE_URL + `/v1/profile/${userDsnpId}`;
      let body = { profile: validProfileNoUploadedAssets };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.put(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
    // Request No. 2: ApiController_profile with asset
    {
      let url = BASE_URL + `/v1/profile/${userDsnpId}`;
      const referenceId = getReferenceId(BASE_URL);
      let profile = Object.assign({}, validProfileNoUploadedAssets, {
        icon: [
          {
            referenceId: referenceId,
            height: 123,
            width: 321,
          },
        ],
      });
      let body = { profile: profile };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.put(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/v1/content/{userDsnpId}/broadcast', () => {
    let userDsnpId = '1';

    // Request No. 1: ApiController_broadcast no assets
    {
      let url = BASE_URL + `/v1/content/${userDsnpId}/broadcast`;
      const body = {
        content: validContentNoUploadedAssets,
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
    // Request No. 2: ApiController_broadcast with assets
    {
      let url = BASE_URL + `/v1/content/${userDsnpId}/broadcast`;
      const body = {
        content: createContentWithAsset(BASE_URL),
      };
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/v1/content/{userDsnpId}/reaction', () => {
    let userDsnpId = '1';

    // Request No. 1: ApiController_reaction
    {
      let url = BASE_URL + `/v1/content/${userDsnpId}/reaction`;
      let body = validReaction;
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });

  group('/v1/content/{userDsnpId}/reply', () => {
    let userDsnpId = '1';

    // Request No. 1: ApiController_reply no assets
    {
      let url = BASE_URL + `/v1/content/${userDsnpId}/reply`;
      let body = validReplyNoUploadedAssets;
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
    // Request No. 2: ApiController_reply with assets
    {
      let url = BASE_URL + `/v1/content/${userDsnpId}/reply`;
      let body = Object.assign({}, validReplyNoUploadedAssets, { content: createContentWithAsset(BASE_URL) });
      let params = { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        '': (r) => r.status === 202,
      });
    }
  });
}
